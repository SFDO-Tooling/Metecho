openapi: 3.0.3
info:
  title: Metecho
  version: 0.1.0
  description: 2019â€“2022, Salesforce.org
paths:
  /api/dependencies/:
    get:
      operationId: dependencies_list
      description: Dependencies available during Project creation
      tags:
      - dependencies
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectDependency'
          description: ''
  /api/dependencies/{id}/:
    get:
      operationId: dependencies_retrieve
      description: Dependencies available during Project creation
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this project dependency.
        required: true
      tags:
      - dependencies
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDependency'
          description: ''
  /api/epics/:
    get:
      operationId: epics_list
      description: Manage Epics related to a Metecho Project.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: project
        schema:
          type: string
          format: HashID
      - in: query
        name: slug
        schema:
          type: string
      tags:
      - epics
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEpicList'
          description: ''
    post:
      operationId: epics_create
      description: Manage Epics related to a Metecho Project.
      tags:
      - epics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EpicRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EpicRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EpicRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
          description: ''
  /api/epics/{id}/:
    get:
      operationId: epics_retrieve
      description: Manage Epics related to a Metecho Project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this epic.
        required: true
      tags:
      - epics
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
          description: ''
    put:
      operationId: epics_update
      description: Manage Epics related to a Metecho Project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this epic.
        required: true
      tags:
      - epics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EpicRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EpicRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EpicRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
          description: ''
    patch:
      operationId: epics_partial_update
      description: Manage Epics related to a Metecho Project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this epic.
        required: true
      tags:
      - epics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEpicRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEpicRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEpicRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
          description: ''
    delete:
      operationId: epics_destroy
      description: Manage Epics related to a Metecho Project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this epic.
        required: true
      tags:
      - epics
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/epics/{id}/collaborators/:
    post:
      operationId: epics_collaborators_create
      description: |-
        Edit the Epic collaborators. Exposed as a separate endpoint for users without
        write access to Epics.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this epic.
        required: true
      tags:
      - epics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EpicCollaboratorsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EpicCollaboratorsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EpicCollaboratorsRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
          description: ''
    put:
      operationId: epics_collaborators_update
      description: |-
        Edit the Epic collaborators. Exposed as a separate endpoint for users without
        write access to Epics.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this epic.
        required: true
      tags:
      - epics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EpicCollaboratorsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EpicCollaboratorsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EpicCollaboratorsRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
          description: ''
  /api/epics/{id}/create_pr/:
    post:
      operationId: epics_create_pr_create
      description: Queue a job to create a GitHub pull request.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this epic.
        required: true
      tags:
      - epics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreatePrRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePrRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Epic'
          description: ''
  /api/issues/:
    get:
      operationId: issues_list
      description: GitHub Issues
      parameters:
      - in: query
        name: id
        schema:
          type: string
      - in: query
        name: is_attached
        schema:
          type: boolean
        description: Filter/exclude issues attached to Epics or Tasks
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: project
        schema:
          type: string
          format: HashID
      - in: query
        name: search
        schema:
          type: string
        description: Search in issue titles and numbers
      tags:
      - issues
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGitHubIssueList'
          description: ''
  /api/issues/{id}/:
    get:
      operationId: issues_retrieve
      description: GitHub Issues
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this GitHub issue.
        required: true
      tags:
      - issues
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubIssue'
          description: ''
  /api/organizations/:
    get:
      operationId: organizations_list
      description: GitHub Organizations available during Project creation
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - organizations
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGitHubOrganizationList'
          description: ''
  /api/organizations/{id}/:
    get:
      operationId: organizations_retrieve
      description: GitHub Organizations available during Project creation
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this GitHub organization.
        required: true
      tags:
      - organizations
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubOrganization'
          description: ''
  /api/organizations/{id}/check_app_installation/:
    post:
      operationId: organizations_check_app_installation_create
      description: Verify the GitHub App has been installed correctly in the organization
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this GitHub organization.
        required: true
      tags:
      - organizations
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubAppInstallationCheck'
          description: ''
  /api/organizations/{id}/check_repo_name/:
    post:
      operationId: organizations_check_repo_name_create
      description: Determine if a repository name is available for the Organization
        on GitHub
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this GitHub organization.
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckRepoNameRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CheckRepoNameRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CheckRepoNameRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
          description: ''
  /api/organizations/{id}/members/:
    get:
      operationId: organizations_members_list
      description: Fetch the members of an Organization from GitHub
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this GitHub organization.
        required: true
      tags:
      - organizations
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortGitHubUser'
          description: ''
  /api/projects/:
    get:
      operationId: projects_list
      description: Read-only information about Metecho Projects.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: slug
        schema:
          type: string
      tags:
      - projects
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: projects_create
      description: Read-only information about Metecho Projects.
      tags:
      - projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/projects/{id}/:
    get:
      operationId: projects_retrieve
      description: Read-only information about Metecho Projects.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this project.
        required: true
      tags:
      - projects
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/projects/{id}/feature_branches/:
    get:
      operationId: projects_feature_branches_retrieve
      description: Get a list of feature branch names for a Project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this project.
        required: true
      tags:
      - projects
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
          description: ''
  /api/projects/{id}/refresh_github_issues/:
    post:
      operationId: projects_refresh_github_issues_create
      description: Queue a job to refresh the list of GitHub Issues for a Project
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this project.
        required: true
      tags:
      - projects
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          description: No response body
  /api/projects/{id}/refresh_github_users/:
    post:
      operationId: projects_refresh_github_users_create
      description: Queue a job to refresh the list of GitHub users for a Project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this project.
        required: true
      tags:
      - projects
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          description: No response body
  /api/projects/{id}/refresh_org_config_names/:
    post:
      operationId: projects_refresh_org_config_names_create
      description: Queue a job to refresh the list of ScratchOrg configs for a Project.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this project.
        required: true
      tags:
      - projects
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /api/scratch-orgs/:
    get:
      operationId: scratch_orgs_list
      description: Manage Salesforce scratch orgs.
      parameters:
      - in: query
        name: epic
        schema:
          type: string
          format: HashID
      - in: query
        name: project
        schema:
          type: string
          format: HashID
      - in: query
        name: task
        schema:
          type: string
          format: HashID
      tags:
      - scratch-orgs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScratchOrg'
          description: ''
    post:
      operationId: scratch_orgs_create
      description: Manage Salesforce scratch orgs.
      tags:
      - scratch-orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScratchOrgRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScratchOrgRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScratchOrgRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
  /api/scratch-orgs/{id}/:
    get:
      operationId: scratch_orgs_retrieve
      description: Manage Salesforce scratch orgs.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
    put:
      operationId: scratch_orgs_update
      description: Manage Salesforce scratch orgs.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScratchOrgRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ScratchOrgRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScratchOrgRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
    patch:
      operationId: scratch_orgs_partial_update
      description: Manage Salesforce scratch orgs.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedScratchOrgRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedScratchOrgRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedScratchOrgRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
    delete:
      operationId: scratch_orgs_destroy
      description: Manage Salesforce scratch orgs.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/scratch-orgs/{id}/commit/:
    post:
      operationId: scratch_orgs_commit_create
      description: Queue a job that commits changes retrieved from a ScratchOrg.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommitRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommitRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
  /api/scratch-orgs/{id}/commit_dataset/:
    post:
      operationId: scratch_orgs_commit_dataset_create
      description: Queue a job that updates and commits a dataset from the Dev Org
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitDatasetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommitDatasetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommitDatasetRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
  /api/scratch-orgs/{id}/commit_omnistudio/:
    post:
      operationId: scratch_orgs_commit_omnistudio_create
      description: Queue a job that updates and commits a dataset from the Dev Org
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitOmniStudioRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommitOmniStudioRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommitOmniStudioRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
  /api/scratch-orgs/{id}/listmetadata/:
    post:
      operationId: scratch_orgs_listmetadata_create
      description: Manage Salesforce scratch orgs.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListMetadataRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListMetadataRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListMetadataRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
  /api/scratch-orgs/{id}/log/:
    get:
      operationId: scratch_orgs_log_retrieve
      description: Return the CCI build log or traceback from a scratch org build.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: Log content
  /api/scratch-orgs/{id}/parse_datasets/:
    post:
      operationId: scratch_orgs_parse_datasets_create
      description: Queue a job to parse the dataset definitions for this Org's Task
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
  /api/scratch-orgs/{id}/redirect/:
    get:
      operationId: scratch_orgs_redirect_retrieve
      description: Redirect to a ScratchOrg's URL.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '302':
          description: No response body
  /api/scratch-orgs/{id}/refresh/:
    post:
      operationId: scratch_orgs_refresh_create
      description: Queue a job that retrieves the latest changes from a ScratchOrg.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this scratch org.
        required: true
      tags:
      - scratch-orgs
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScratchOrg'
          description: ''
  /api/tasks/:
    get:
      operationId: tasks_list
      description: Manage Tasks related to a Metecho Project or Epic.
      parameters:
      - in: query
        name: assigned_to_me
        schema:
          type: boolean
        description: Filter/exclude tasks assigned to the current user
      - in: query
        name: epic
        schema:
          type: string
          format: HashID
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: project
        schema:
          type: string
          format: HashID
      - in: query
        name: slug
        schema:
          type: string
      tags:
      - tasks
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
    post:
      operationId: tasks_create
      description: Manage Tasks related to a Metecho Project or Epic.
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/tasks/{id}/:
    get:
      operationId: tasks_retrieve
      description: Manage Tasks related to a Metecho Project or Epic.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: tasks_update
      description: Manage Tasks related to a Metecho Project or Epic.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: tasks_partial_update
      description: Manage Tasks related to a Metecho Project or Epic.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTaskRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: tasks_destroy
      description: Manage Tasks related to a Metecho Project or Epic.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/tasks/{id}/assignees/:
    post:
      operationId: tasks_assignees_create
      description: |-
        Edit the assigned Developer and Tester on a Task. Exposed as a separate endpoint
        for users without write access to Tasks.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskAssigneeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskAssigneeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskAssigneeRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: tasks_assignees_update
      description: |-
        Edit the assigned Developer and Tester on a Task. Exposed as a separate endpoint
        for users without write access to Tasks.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskAssigneeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TaskAssigneeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TaskAssigneeRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/tasks/{id}/can_reassign/:
    post:
      operationId: tasks_can_reassign_create
      description: Check if a GitHub user can be assigned to a Task
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CanReassignRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CanReassignRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CanReassignRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  can_reassign:
                    type: boolean
          description: ''
  /api/tasks/{id}/create_pr/:
    post:
      operationId: tasks_create_pr_create
      description: Queue a job to create a GitHub pull request.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreatePrRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePrRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/tasks/{id}/review/:
    post:
      operationId: tasks_review_create
      description: Queue a job that submits a Task pull request review.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this task.
        required: true
      tags:
      - tasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/user/:
    get:
      operationId: current_user_retrieve
      description: Get full details about the current user.
      tags:
      - user
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
          description: ''
  /api/user/{id}/delete/:
    delete:
      operationId: user_delete_destroy
      description: Actions related to the current user.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this user.
        required: true
      tags:
      - user
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /api/user/agree_to_tos/:
    put:
      operationId: user_agree_to_tos_update
      description: Set the user's `agreed_to_tos_at` field to the current datetime.
      tags:
      - user
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
          description: ''
  /api/user/complete_onboarding/:
    put:
      operationId: user_complete_onboarding_update
      description: Set the user's `onboarded_at` field to the current datetime.
      tags:
      - user
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
          description: ''
  /api/user/disconnect/:
    post:
      operationId: user_disconnect_create
      description: Disconnect the current user from their SalesForce account.
      tags:
      - user
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
          description: ''
  /api/user/guided_tour/:
    post:
      operationId: user_guided_tour_create
      description: Update the user's guided-tour preferences and history.
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuidedTourRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GuidedTourRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GuidedTourRequest'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUser'
          description: ''
  /api/user/refresh/:
    post:
      operationId: user_refresh_create
      description: Queue a job to refresh the user's list of GitHub repositories.
      tags:
      - user
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          description: No response body
  /api/user/refresh_orgs/:
    post:
      operationId: user_refresh_orgs_create
      description: Queue a job to refresh the user's list of GitHub organizations.
      tags:
      - user
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '202':
          description: No response body
  /api/users/:
    get:
      operationId: users_list
      description: Read-only information about all users.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - users
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMinimalUserList'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      description: Read-only information about all users.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: HashID
        description: A unique integer value identifying this user.
        required: true
      tags:
      - users
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinimalUser'
          description: ''
components:
  schemas:
    CanReassignRequest:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/RoleEnum'
        gh_uid:
          type: integer
          nullable: true
      required:
      - gh_uid
      - role
    CheckRepoNameRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
      required:
      - name
    CommitDatasetRequest:
      type: object
      properties:
        commit_message:
          type: string
          minLength: 1
        dataset_name:
          type: string
          minLength: 1
        dataset_definition:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              minLength: 1
      required:
      - commit_message
      - dataset_definition
      - dataset_name
    CommitOmniStudioRequest:
      type: object
      properties:
        commit_message:
          type: string
          minLength: 1
        yaml_path:
          type: string
          minLength: 1
      required:
      - commit_message
      - yaml_path
    CommitRequest:
      type: object
      properties:
        commit_message:
          type: string
          minLength: 1
        changes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              minLength: 1
        target_directory:
          type: string
          minLength: 1
      required:
      - changes
      - commit_message
      - target_directory
    CreatePrRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        critical_changes:
          type: string
        additional_changes:
          type: string
        issues:
          type: string
        notes:
          type: string
        alert_assigned_qa:
          type: boolean
      required:
      - additional_changes
      - alert_assigned_qa
      - critical_changes
      - issues
      - notes
      - title
    Epic:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        description_rendered:
          type: string
          readOnly: true
        slug:
          type: string
          readOnly: true
        old_slugs:
          type: array
          items:
            type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        project:
          type: string
          format: HashID
        task_count:
          type: integer
          readOnly: true
        branch_url:
          type: string
          format: uri
          readOnly: true
        branch_diff_url:
          type: string
          format: uri
          readOnly: true
        branch_name:
          type: string
          pattern: ^[-\w/]+$
          maxLength: 100
        has_unmerged_commits:
          type: boolean
          readOnly: true
        currently_creating_branch:
          type: boolean
          readOnly: true
        currently_creating_pr:
          type: boolean
          readOnly: true
        pr_url:
          type: string
          format: uri
          readOnly: true
        pr_is_open:
          type: boolean
          readOnly: true
        pr_is_merged:
          type: boolean
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/EpicStatusEnum'
          readOnly: true
        github_users:
          type: array
          items:
            type: integer
          readOnly: true
        latest_sha:
          type: string
          readOnly: true
        issue:
          type: string
          format: HashID
          nullable: true
      required:
      - branch_diff_url
      - branch_url
      - created_at
      - currently_creating_branch
      - currently_creating_pr
      - description_rendered
      - github_users
      - has_unmerged_commits
      - id
      - latest_sha
      - name
      - old_slugs
      - pr_is_merged
      - pr_is_open
      - pr_url
      - project
      - slug
      - status
      - task_count
    EpicCollaboratorsRequest:
      type: object
      properties:
        github_users:
          type: array
          items:
            type: integer
      required:
      - github_users
    EpicMinimal:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        slug:
          type: string
          readOnly: true
        github_users:
          type: array
          items:
            type: integer
          readOnly: true
      required:
      - github_users
      - id
      - name
      - slug
    EpicRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        project:
          type: string
          format: HashID
        branch_name:
          type: string
          pattern: ^[-\w/]+$
          maxLength: 100
        issue:
          type: string
          format: HashID
          nullable: true
      required:
      - name
      - project
    EpicStatusEnum:
      enum:
      - Planned
      - In progress
      - Review
      - Merged
      type: string
      description: |-
        * `Planned` - Planned
        * `In progress` - In Progress
        * `Review` - Review
        * `Merged` - Merged
    FullUser:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        avatar_url:
          type: string
          nullable: true
          readOnly: true
        github_id:
          type: integer
          nullable: true
          readOnly: true
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        valid_token_for:
          type: string
          nullable: true
          readOnly: true
        org_name:
          type: string
          nullable: true
          readOnly: true
        org_type:
          type: string
          nullable: true
          readOnly: true
        is_devhub_enabled:
          type: boolean
          readOnly: true
        sf_username:
          type: string
          nullable: true
          readOnly: true
        currently_fetching_repos:
          type: boolean
        currently_fetching_orgs:
          type: boolean
        devhub_username:
          type: string
        uses_global_devhub:
          type: boolean
          readOnly: true
        agreed_to_tos_at:
          type: string
          format: date-time
          nullable: true
        onboarded_at:
          type: string
          format: date-time
          nullable: true
          description: Date of the last time the user completed the interactive onboarding
        self_guided_tour_enabled:
          type: boolean
        self_guided_tour_state:
          nullable: true
        organizations:
          type: array
          items:
            $ref: '#/components/schemas/GitHubOrganization'
          readOnly: true
      required:
      - avatar_url
      - github_id
      - id
      - is_devhub_enabled
      - org_name
      - org_type
      - organizations
      - sf_username
      - username
      - uses_global_devhub
      - valid_token_for
    GitHubAppInstallationCheck:
      type: object
      properties:
        success:
          type: boolean
        messages:
          type: array
          items:
            type: string
      required:
      - messages
      - success
    GitHubCollaborator:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        login:
          type: string
        avatar_url:
          type: string
          format: uri
        permissions:
          $ref: '#/components/schemas/RepoPermission'
      required:
      - avatar_url
      - id
      - login
      - name
    GitHubIssue:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        number:
          type: integer
          readOnly: true
        title:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        html_url:
          type: string
          format: uri
          readOnly: true
        project:
          type: string
          format: HashID
        epic:
          properties:
            id:
              type: string
              format: HashID
            name:
              type: string
            status:
              type: string
            slug:
              type: string
          nullable: true
          readOnly: true
        task:
          properties:
            id:
              type: string
              format: HashID
            name:
              type: string
            status:
              type: string
            review_status:
              type: string
            review_valid:
              type: boolean
            pr_is_open:
              type: boolean
            slug:
              type: string
            epic_slug:
              type: string
              nullable: true
          nullable: true
          readOnly: true
      required:
      - created_at
      - epic
      - html_url
      - id
      - number
      - project
      - task
      - title
    GitHubOrganization:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        avatar_url:
          type: string
          format: uri
          maxLength: 200
      required:
      - id
      - name
    GuidedTourRequest:
      type: object
      properties:
        enabled:
          type: boolean
        state: {}
    ListMetadataRequest:
      type: object
      properties:
        desired_type:
          type: string
          minLength: 1
      required:
      - desired_type
    MinimalUser:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        avatar_url:
          type: string
          nullable: true
          readOnly: true
      required:
      - avatar_url
      - id
      - username
    OrgConfigName:
      type: object
      properties:
        key:
          type: string
        label:
          type: string
        description:
          type: string
      required:
      - key
    OrgTypeEnum:
      enum:
      - Dev
      - QA
      - Playground
      type: string
      description: |-
        * `Dev` - Dev
        * `QA` - QA
        * `Playground` - Playground
    PaginatedEpicList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Epic'
    PaginatedGitHubIssueList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GitHubIssue'
    PaginatedGitHubOrganizationList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GitHubOrganization'
    PaginatedMinimalUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/MinimalUser'
    PaginatedProjectList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PaginatedTaskList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    PatchedEpicRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        project:
          type: string
          format: HashID
        branch_name:
          type: string
          pattern: ^[-\w/]+$
          maxLength: 100
        issue:
          type: string
          format: HashID
          nullable: true
    PatchedScratchOrgRequest:
      type: object
      properties:
        project:
          type: string
          format: HashID
          nullable: true
        epic:
          type: string
          format: HashID
          nullable: true
        task:
          type: string
          format: HashID
          nullable: true
        org_type:
          $ref: '#/components/schemas/OrgTypeEnum'
        description:
          type: string
        ignored_changes_write:
          writeOnly: true
        org_config_name:
          type: string
          minLength: 1
    PatchedTaskRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        epic:
          type: string
          format: HashID
          nullable: true
        project:
          type: string
          format: HashID
          nullable: true
        branch_name:
          type: string
          pattern: ^[-\w/]+$
          maxLength: 100
        issue:
          type: string
          format: HashID
          nullable: true
        assigned_dev:
          type: integer
          nullable: true
        dev_org:
          type: string
          format: HashID
          writeOnly: true
        org_config_name:
          type: string
          minLength: 1
    Project:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        repo_id:
          type: integer
          readOnly: true
        repo_url:
          type: string
          format: uri
          readOnly: true
        repo_owner:
          type: string
        repo_name:
          type: string
        has_truncated_issues:
          type: boolean
          readOnly: true
        has_push_permission:
          type: boolean
          readOnly: true
        description:
          type: string
        description_rendered:
          type: string
          readOnly: true
        is_managed:
          type: boolean
        slug:
          type: string
        old_slugs:
          type: array
          items:
            type: string
          readOnly: true
        branch_prefix:
          type: string
        github_users:
          type: array
          items:
            $ref: '#/components/schemas/GitHubCollaborator'
          readOnly: true
        github_issue_count:
          type: integer
          readOnly: true
        repo_image_url:
          type: string
          format: uri
          readOnly: true
        org_config_names:
          type: array
          items:
            $ref: '#/components/schemas/OrgConfigName'
          readOnly: true
        currently_fetching_org_config_names:
          type: boolean
          readOnly: true
        currently_fetching_github_users:
          type: boolean
          readOnly: true
        latest_sha:
          type: string
          readOnly: true
        currently_fetching_issues:
          type: boolean
          readOnly: true
      required:
      - currently_fetching_github_users
      - currently_fetching_issues
      - currently_fetching_org_config_names
      - description_rendered
      - github_issue_count
      - github_users
      - has_push_permission
      - has_truncated_issues
      - id
      - latest_sha
      - name
      - old_slugs
      - org_config_names
      - repo_id
      - repo_image_url
      - repo_name
      - repo_owner
      - repo_url
      - slug
    ProjectCreateRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        organization:
          type: string
          format: HashID
        repo_name:
          type: string
          minLength: 1
        github_users:
          type: array
          items:
            $ref: '#/components/schemas/ShortGitHubUserRequest'
        dependencies:
          type: array
          items:
            type: string
            format: HashID
      required:
      - dependencies
      - github_users
      - name
      - organization
      - repo_name
    ProjectDependency:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        recommended:
          type: boolean
      required:
      - id
      - name
    RepoPermission:
      type: object
      properties:
        push:
          type: boolean
        pull:
          type: boolean
        admin:
          type: boolean
    ReviewRequest:
      type: object
      properties:
        notes:
          type: string
        status:
          $ref: '#/components/schemas/ReviewStatusEnum'
        delete_org:
          type: boolean
        org:
          type: string
          format: HashID
          nullable: true
      required:
      - delete_org
      - notes
      - org
      - status
    ReviewStatusEnum:
      enum:
      - Approved
      - Changes requested
      type: string
      description: |-
        * `Approved` - Approved
        * `Changes requested` - Changes Requested
    RoleEnum:
      enum:
      - assigned_qa
      - assigned_dev
      type: string
      description: |-
        * `assigned_qa` - assigned_qa
        * `assigned_dev` - assigned_dev
    ScratchOrg:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        project:
          type: string
          format: HashID
          nullable: true
        epic:
          type: string
          format: HashID
          nullable: true
        task:
          type: string
          format: HashID
          nullable: true
        org_type:
          $ref: '#/components/schemas/OrgTypeEnum'
        owner:
          type: string
          format: HashID
          readOnly: true
        description:
          type: string
        description_rendered:
          type: string
          readOnly: true
        last_modified_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        expires_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        latest_commit:
          type: string
          readOnly: true
        latest_commit_url:
          type: string
          format: uri
          readOnly: true
        latest_commit_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_checked_unsaved_changes_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        url:
          type: string
          format: uri
          readOnly: true
        unsaved_changes:
          type: object
          additionalProperties: {}
          readOnly: true
        total_unsaved_changes:
          type: integer
          readOnly: true
        has_unsaved_changes:
          type: boolean
          readOnly: true
        ignored_changes:
          type: object
          additionalProperties: {}
          readOnly: true
        total_ignored_changes:
          type: integer
          readOnly: true
        has_ignored_changes:
          type: boolean
          readOnly: true
        currently_refreshing_changes:
          type: boolean
          readOnly: true
        currently_retrieving_metadata:
          type: boolean
          readOnly: true
        currently_refreshing_org:
          type: boolean
          readOnly: true
        currently_reassigning_user:
          type: boolean
          readOnly: true
        is_created:
          type: boolean
          readOnly: true
        delete_queued_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        owner_gh_username:
          type: string
          readOnly: true
        owner_gh_id:
          type: integer
          nullable: true
          readOnly: true
        has_been_visited:
          type: boolean
          readOnly: true
        valid_target_directories:
          type: object
          additionalProperties: {}
          readOnly: true
        org_config_name:
          type: string
        currently_parsing_datasets:
          type: boolean
          readOnly: true
        currently_retrieving_dataset:
          type: boolean
          readOnly: true
        currently_retrieving_omnistudio:
          type: boolean
          readOnly: true
        installed_packages:
          readOnly: true
        is_omnistudio_installed:
          type: boolean
          readOnly: true
        non_source_changes:
          type: object
          additionalProperties: {}
          readOnly: true
        has_non_source_changes:
          type: boolean
          readOnly: true
      required:
      - currently_parsing_datasets
      - currently_reassigning_user
      - currently_refreshing_changes
      - currently_refreshing_org
      - currently_retrieving_dataset
      - currently_retrieving_metadata
      - currently_retrieving_omnistudio
      - delete_queued_at
      - description_rendered
      - expires_at
      - has_been_visited
      - has_ignored_changes
      - has_non_source_changes
      - has_unsaved_changes
      - id
      - ignored_changes
      - installed_packages
      - is_created
      - is_omnistudio_installed
      - last_checked_unsaved_changes_at
      - last_modified_at
      - latest_commit
      - latest_commit_at
      - latest_commit_url
      - non_source_changes
      - org_config_name
      - org_type
      - owner
      - owner_gh_id
      - owner_gh_username
      - total_ignored_changes
      - total_unsaved_changes
      - unsaved_changes
      - url
      - valid_target_directories
    ScratchOrgRequest:
      type: object
      properties:
        project:
          type: string
          format: HashID
          nullable: true
        epic:
          type: string
          format: HashID
          nullable: true
        task:
          type: string
          format: HashID
          nullable: true
        org_type:
          $ref: '#/components/schemas/OrgTypeEnum'
        description:
          type: string
        ignored_changes_write:
          writeOnly: true
        org_config_name:
          type: string
          minLength: 1
      required:
      - org_config_name
      - org_type
    ShortGitHubUser:
      type: object
      description: See https://github3py.readthedocs.io/en/master/api-reference/users.html#github3.users.ShortUser
      properties:
        id:
          type: integer
        login:
          type: string
        name:
          type: string
        avatar_url:
          type: string
          format: uri
      required:
      - id
      - login
    ShortGitHubUserRequest:
      type: object
      description: See https://github3py.readthedocs.io/en/master/api-reference/users.html#github3.users.ShortUser
      properties:
        id:
          type: integer
        login:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        avatar_url:
          type: string
          format: uri
          minLength: 1
      required:
      - id
      - login
    Task:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        description_rendered:
          type: string
          readOnly: true
        epic:
          allOf:
          - $ref: '#/components/schemas/EpicMinimal'
          nullable: true
        project:
          type: string
          format: HashID
          nullable: true
        slug:
          type: string
          readOnly: true
        old_slugs:
          type: array
          items:
            type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        has_unmerged_commits:
          type: boolean
          readOnly: true
        currently_creating_branch:
          type: boolean
          readOnly: true
        currently_creating_pr:
          type: boolean
          readOnly: true
        branch_name:
          type: string
          pattern: ^[-\w/]+$
          maxLength: 100
        root_project:
          type: string
          readOnly: true
        root_project_slug:
          type: string
          readOnly: true
        branch_url:
          type: string
          format: uri
          readOnly: true
        commits:
          readOnly: true
        origin_sha:
          type: string
          readOnly: true
        branch_diff_url:
          type: string
          format: uri
          readOnly: true
        pr_url:
          type: string
          format: uri
          readOnly: true
        issue:
          type: string
          format: HashID
          nullable: true
        review_submitted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        review_valid:
          type: boolean
          readOnly: true
        review_status:
          allOf:
          - $ref: '#/components/schemas/ReviewStatusEnum'
          readOnly: true
        review_sha:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/TaskStatusEnum'
          readOnly: true
        pr_is_open:
          type: boolean
          readOnly: true
        assigned_dev:
          allOf:
          - $ref: '#/components/schemas/ShortGitHubUser'
          nullable: true
        assigned_qa:
          allOf:
          - $ref: '#/components/schemas/ShortGitHubUser'
          readOnly: true
        currently_submitting_review:
          type: boolean
          readOnly: true
        org_config_name:
          type: string
      required:
      - assigned_qa
      - branch_diff_url
      - branch_url
      - commits
      - created_at
      - currently_creating_branch
      - currently_creating_pr
      - currently_submitting_review
      - description_rendered
      - has_unmerged_commits
      - id
      - name
      - old_slugs
      - org_config_name
      - origin_sha
      - pr_is_open
      - pr_url
      - review_sha
      - review_status
      - review_submitted_at
      - review_valid
      - root_project
      - root_project_slug
      - slug
      - status
    TaskAssigneeRequest:
      type: object
      properties:
        assigned_dev:
          type: integer
          nullable: true
        assigned_qa:
          type: integer
          nullable: true
        should_alert_dev:
          type: boolean
        should_alert_qa:
          type: boolean
    TaskRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        epic:
          type: string
          format: HashID
          nullable: true
        project:
          type: string
          format: HashID
          nullable: true
        branch_name:
          type: string
          pattern: ^[-\w/]+$
          maxLength: 100
        issue:
          type: string
          format: HashID
          nullable: true
        assigned_dev:
          type: integer
          nullable: true
        dev_org:
          type: string
          format: HashID
          writeOnly: true
        org_config_name:
          type: string
          minLength: 1
      required:
      - name
      - org_config_name
    TaskStatusEnum:
      enum:
      - Planned
      - In progress
      - Completed
      - Canceled
      type: string
      description: |-
        * `Planned` - Planned
        * `In progress` - In Progress
        * `Completed` - Completed
        * `Canceled` - Canceled
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
